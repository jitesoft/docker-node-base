include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/container_scan-v2.yml

stages:
  - pre
  - download
  - build
  - slim
  - full
  - scan
  - notify

download:pgp:
  stage: pre
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache gnupg linux-headers
  script:
    - |
      if [ -f keys.out ]; then
        gpg --import keys.out
      fi
    - |
      for key in `cat gpgkeys.txt`; do
        gpg --list-keys ${key} || (gpg --keyserver pgp.mit.edu --recv-keys "$key" || gpg --keyserver keyserver.pgp.com --recv-keys "$key" || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key")
      done
    - gpg --export > keys.out
  tags:
    - jitesoft
  cache:
    key: nodejs.gpg.keyring
    paths:
      - keys.out
  artifacts:
    paths:
      - keys.out
    expire_in: 1 day

download:versions:
  stage: pre
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  variables:
    GIT_STRATEGY: none
    NODE_VERSIONS: "12 13"
  before_script:
    - apk add --no-cache grep
  script:
    - mkdir versions
    - |
      for version in $NODE_VERSIONS; do
        wget -qO- https://nodejs.org/dist/latest-v${version}.x/ | grep -oP "(?<=>node-v)(([0-9]{0,3}(\.?)){3})" | awk 'NR==1{print $1}' > versions/${version}.txt
      done;
  only:
    refs:
      - master
  tags:
    - jitesoft
  artifacts:
    paths:
      - versions/*.txt
    expire_in: 1 day

download:tars:
  stage: download
  dependencies:
    - download:versions
    - download:pgp
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache curl grep gnupg
    - gpg --import keys.out
  script:
    - |
      for VERSION_FILE in versions/*.txt; do
        VERSION=$(cat ${VERSION_FILE})
        curl -OsS https://nodejs.org/dist/v${VERSION}/node-v${VERSION}.tar.xz
        curl -OsS https://nodejs.org/dist/v${VERSION}/SHASUMS256.txt
        curl -OsS https://nodejs.org/dist/v${VERSION}/SHASUMS256.txt.sig
        gpg --verify SHASUMS256.txt.sig SHASUMS256.txt
        grep " node-v${VERSION}.tar.xz\$" SHASUMS256.txt | sha256sum -c -
        mv node-v${VERSION}.tar.xz versions/node-v${VERSION}.tar.xz
      done;
  tags:
    - jitesoft
  only:
    refs:
      - master
  artifacts:
    paths:
      - versions/*.tar.xz
      - versions/*.txt
    expire_in: 1 day

.build:binary:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  dependencies:
    - download:tars
  before_script:
    - BUILD_ARCH=x86_64
    - DOCKER_ARCH=amd64
    - if [ "$(cat /etc/apk/arch)" == "aarch64" ]; then DOCKER_ARCH=arm64; BUILD_ARCH=arm64; fi
    - apk add --no-cache build-base binutils-gold git python linux-headers ccache libstdc++ xz gnupg curl
    - mkdir -p result/${DOCKER_ARCH} src
    - if [ ! -d "ccache" ]; then mkdir ccache; fi
  script:
    - export PATH="/usr/lib/ccache/bin:$PATH"
    - NODE=$(cat versions/${NODE_VERSION}.txt)
    - ccache -s
    - tar -Jxf versions/node-v${NODE}.tar.xz -C src --strip-components=1
    - cd src
    # Only print every 100th line, build.log is added to out directory, err is piped to stdout.
    - make -j4 binary V= DESTCPU="${BUILD_ARCH}" ARCH="${BUILD_ARCH}" VARIATION="musl" RELEASE_URLBASE="https://gitlab.com/jitesoft/dockerfiles/node-base" | tee ../result/build.log | awk 'NR%100==0 {print NR,$0}'
    - cd ..
    - ccache -s
    - ccache -s > result/ccache.log
    - mv src/node-v${NODE}-linux-${BUILD_ARCH}-musl.tar.xz result/node-v${NODE}-linux-${DOCKER_ARCH}-musl.tar.xz
  cache:
    paths:
      - ccache/
    key: node.build.ccache-${BUILD_TYPE}
  artifacts:
    paths:
      - result/
    expire_in: 3 days

.build:binary:amd64: &node_binary-amd64
  extends: .build:binary
  tags:
    - jitesoft
    - ">4x64"
    - ">8gb"
    - "arm64"

.build:binary:aarch64: &node_binary-aarch64
  extends: .build:binary
  tags:
    - "aarch64-native"

.build:slim: &slim_build
  stage: slim
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - NODE=$(cat versions/${NODE_VERSION}.txt)
    - NODE_SHORT=$(echo ${NODE} | cut -d'.' -f1)
    - echo "Building slim image for node v ${NODE} - short name ${NODE_SHORT}"
    - TAGS=$(helper taglist "${CI_REGISTRY_IMAGE},jitesoft/node-base" "${NODE}-slim,${NODE_SHORT}-slim,${BUILD_TYPE}-slim${EXTRA_TAGS}")
    - echo "Tags - ${TAGS}"
    - docker buildx build --platform "linux/amd64,linux/arm64" --push ${TAGS} --build-arg NODE_VERSION=${NODE} --progress plain -f slim/Dockerfile .
    - docker pull ${CI_REGISTRY_IMAGE}:${NODE}-slim
    - |
      for tag in $(echo "${NODE}-slim,${NODE_SHORT}-slim,${BUILD_TYPE}-slim${EXTRA_TAGS}" | tr "," " "); do
        docker tag ${CI_REGISTRY_IMAGE}:${NODE}-slim quay.io/jitesoft/node:${tag}
        docker push quay.io/jitesoft/node:${tag}
      done
  only:
    refs:
      - master
  tags:
    - jitesoft
    - buildx
    - amd64
    - arm64

.build:full: &full_build
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: full
  script:
    - NODE=$(cat versions/${NODE_VERSION}.txt)
    - NODE_SHORT=$(echo ${NODE} | cut -d'.' -f1)
    - TAGS=$(helper taglist "${CI_REGISTRY_IMAGE},jitesoft/node,jitesoft/node-base" "${NODE},${NODE_SHORT},${BUILD_TYPE}${EXTRA_TAGS}")
    - echo "Tags - ${TAGS}"
    - docker buildx build --platform "linux/amd64,linux/arm64" --progress plain --push ${TAGS} --build-arg NODE_VERSION=${NODE} -f full/Dockerfile .
    - docker pull ${CI_REGISTRY_IMAGE}:${NODE}
    - |
      for tag in $(echo "${NODE},${NODE_SHORT},${BUILD_TYPE}${EXTRA_TAGS}" | tr "," " "); do
        docker tag ${CI_REGISTRY_IMAGE}:${NODE} quay.io/jitesoft/node:${tag}
        docker push quay.io/jitesoft/node:${tag}
      done
  only:
    refs:
      - master
  tags:
    - jitesoft
    - arm64
    - amd64
    - buildx

build:src:latest:
  variables:
    BUILD_TYPE: "latest"
    NODE_VERSION: "13"
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
  <<: *node_binary-amd64

build:src:stable:
  variables:
    BUILD_TYPE: "stable"
    NODE_VERSION: "12"
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
  <<: *node_binary-amd64

build:src:latest:arm64:
  variables:
    BUILD_TYPE: "latest-arm64"
    NODE_VERSION: "13"
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
  <<: *node_binary-aarch64

build:src:stable:arm64:
  variables:
    BUILD_TYPE: "stable-arm64"
    NODE_VERSION: "12"
    CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
  <<: *node_binary-aarch64

build:slim:latest:
  needs:
    - build:src:latest
    - build:src:latest:arm64
    - download:versions
  variables:
    BUILD_TYPE: "latest"
    NODE_VERSION: "13"
    EXTRA_TAGS: ""
  <<: *slim_build

build:slim:stable:
  needs:
    - build:src:stable
    - build:src:stable:arm64
    - download:versions
  variables:
    BUILD_TYPE: "stable"
    EXTRA_TAGS: ",lts-slim,erbium-slim"
    NODE_VERSION: "12"
  <<: *slim_build

build:latest:
  needs:
    - download:versions
    - build:slim:latest
  variables:
    EXTRA_TAGS: ""
    BUILD_TYPE: "latest"
    NODE_VERSION: "13"
  <<: *full_build

build:stable:
  needs:
    - build:slim:stable
    - download:versions
  variables:
    BUILD_TYPE: "stable"
    NODE_VERSION: "12"
    EXTRA_TAGS: ",lts,erbium"
  <<: *full_build

scan:stable:
  needs:
    - build:stable
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: ${CI_REGISTRY_IMAGE}:12
    GIT_STRATEGY: none
  only:
    refs:
      - master

scan:latest:
  needs:
    - build:latest
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: ${CI_REGISTRY_IMAGE}:13
    GIT_STRATEGY: none
  only:
    refs:
      - master

trigger_build:
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  stage: notify
  before_script:
    - apk add --no-cache curl
  script:
    - "curl -X POST -F token=${NOTIFY_TOKEN} -F ref=master https://gitlab.com/api/v4/projects/4048627/trigger/pipeline"
  only:
    refs:
      - master
