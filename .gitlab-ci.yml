image: registry.gitlab.com/jitesoft/dockerfiles/docker
variables:
  IMG_NAME: "jitesoft/node-base"
services:
  - registry.gitlab.com/jitesoft/dockerfiles/docker/dind

stages:
  - pre
  - download
  - build
  - slim
  - full
  - notify

download:pgp:
  stage: pre
  before_script:
    - apk add --no-cache gnupg linux-headers
  script:
    - cat keysum.txt
    - md5sum gpgkeys.txt
    - |
      if [ "$(cat keysum.txt | md5sum -c)" ]
      then
        echo "Keys already imported."
      else
        echo "Refreshing GPG keyring."
        for key in `cat gpgkeys.txt`; do
          gpg --keyserver pgp.mit.edu --recv-keys "$key" || \
          gpg --keyserver keyserver.pgp.com --recv-keys "$key" || \
          gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";
        done
        gpg --export > keys.out
        md5sum gpgkeys.txt | tee keysum.txt
      fi
  cache:
    key: nodejs.gpg.keyring
    paths:
      - keys.out
      - keysum.txt
  artifacts:
    paths:
      - keys.out
    expire_in: 1 day

download:versions:
  stage: pre
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  variables:
    GIT_STRATEGY: none
    NODE_VERSIONS: "10 12"
  before_script:
    - apk add --no-cache grep
  script:
    - mkdir versions
    - |
      for version in $NODE_VERSIONS; do
        wget -qO- https://nodejs.org/dist/latest-v${version}.x/ | grep -oP "(?<=>node-v)(([0-9]{0,3}(\.?)){3})" | awk 'NR==1{print $1}' > versions/${version}.txt
      done;
  only:
    refs:
      - master
  retry:
    max: 2
  artifacts:
    paths:
      - versions/*.txt
    expire_in: 1 day

download:tars:
  stage: download
  dependencies:
    - download:versions
    - download:pgp
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache curl grep gnupg
    - gpg --import keys.out
  script:
    - |
      for VERSION_FILE in versions/*.txt; do
        VERSION=$(cat ${VERSION_FILE})
        curl -OsS https://nodejs.org/dist/v${VERSION}/node-v${VERSION}.tar.xz
        curl -OsS https://nodejs.org/dist/v${VERSION}/SHASUMS256.txt
        curl -OsS https://nodejs.org/dist/v${VERSION}/SHASUMS256.txt.sig
        gpg --verify SHASUMS256.txt.sig SHASUMS256.txt
        grep " node-v${VERSION}.tar.xz\$" SHASUMS256.txt | sha256sum -c -
        mv node-v${VERSION}.tar.xz versions/node-v${VERSION}.tar.xz
      done;
  only:
    refs:
      - master
  artifacts:
    paths:
      - versions/*.tar.xz
      - versions/*.txt
    expire_in: 1 day

.build:node: &node_build
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine
  stage: build
  dependencies:
    - download:tars
  before_script:
    - apk add --no-cache build-base git python linux-headers openssl-dev zlib-dev
    - NODE=$(cat versions/${NODE_VERSION}.txt)
    - mkdir node-src
    - tar -Jxf versions/node-v${NODE_VERSION}.tar.xz -C node-src --strip-components=1
    - cd node-src
    - JOBS=$(($(nproc) * 2)
    - echo "Running ${JOBS} parallel jobs."
    - ./configure --fully-static --dest-os=linux --dest-cpu=x86_64 --tag="com.jitesoft.nodejs.alpine"
    - make -j${JOB_COUNT} -s -i -l V= 2>/dev/null | awk 'NR%20==0 {print NR,$0}'
  artifacts:
    paths:
      - node-src/
    expire_in: 10 days
  cache:
    paths:
      - node-src/
    key: node.build.cache-${NODE_VERSION}

.build:slim: &slim_build
  stage: slim
  dependencies:
    - .build:node
  before_script:
    - echo ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
    - echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USER} --password-stdin
  script:
    - NODE=$(cat versions/${NODE_VERSION}.txt)
    - NODE_SHORT=$(echo ${NODE} | cut -d'.' -f1)
    - echo "Building slim image for node v ${NODE} - short name ${NODE_SHORT}"
    - TIME=`date +%s`
    - docker build --label "com.jitesoft.app.nodejs.version=${NODE}" -t ${IMG_NAME}:${BUILD_TYPE}-slim --build-arg NODE_VERSION=${NODE} -f slim/Dockerfile .
    - echo "Took $((`date +%s` - TIME))s"
    - docker push ${IMG_NAME}:${BUILD_TYPE}-slim
    - TAGS="${NODE}-slim ${NODE_SHORT}-slim ${EXTRA_TAGS}"
    - |
      for tag in ${TAGS}; do
        docker tag ${IMG_NAME}:${BUILD_TYPE}-slim ${CI_REGISTRY_IMAGE}:${tag}
        docker tag ${IMG_NAME}:${BUILD_TYPE}-slim ${IMG_NAME}:${tag}
        docker push ${IMG_NAME}:${tag}
        docker push ${CI_REGISTRY_IMAGE}:${tag}
      done
  only:
    refs:
      - master

.build:full: &full_build
  stage: full
  before_script:
    - echo ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
    - echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USER} --password-stdin
  script:
    - NODE=$(cat versions/${NODE_VERSION}.txt)
    - NODE_SHORT=$(echo ${NODE} | cut -d'.' -f1)
    - echo "Building full image for node v ${NODE} - short name ${NODE_SHORT}"
    - docker build -t ${IMG_NAME}:${BUILD_TYPE} --build-arg NODE_VERSION=${NODE_SHORT} -f full/Dockerfile .
    - docker push ${IMG_NAME}:${BUILD_TYPE}
    - TAGS="${NODE} ${NODE_SHORT} ${EXTRA_TAGS}"
    - |
      for tag in ${TAGS}; do
        docker tag ${IMG_NAME}:${BUILD_TYPE} ${CI_REGISTRY_IMAGE}:${tag}
        docker tag ${IMG_NAME}:${BUILD_TYPE} ${IMG_NAME}:${tag}
        docker push ${IMG_NAME}:${tag}
        docker push ${CI_REGISTRY_IMAGE}:${tag}
      done
  only:
    refs:
      - master

build:
  stage: slim
  dependencies:
    - download:tars
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - NODE=$(cat versions/12.txt)
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir /cache
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/slim/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --build-arg NODE_VERSION="${NODE}" --cache=true --cache-dir=/cache
  cache:
    key: nodejs.build-cache
    paths:
      - /cache/

trigger_build:
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  stage: notify
  before_script:
    - apk add --no-cache curl
  script:
    - "curl -X POST -F token=${NOTIFY_TOKEN} -F ref=master https://gitlab.com/api/v4/projects/4048627/trigger/pipeline"
  only:
    refs:
      - master

build:slim:latest:
  variables:
    BUILD_TYPE: "latest"
    EXTRA_TAGS: ''
    NODE_VERSION: "12"
  <<: *slim_build

build:slim:stable:
  variables:
    BUILD_TYPE: "stable"
    EXTRA_TAGS: "lts-slim dubnium-slim"
    NODE_VERSION: "10"
  <<: *slim_build

build:latest:
  variables:
    BUILD_TYPE: "latest"
    NODE_VERSION: "12"
  <<: *full_build

build:stable:
  variables:
    BUILD_TYPE: "stable"
    NODE_VERSION: "10"
    EXTRA_TAGS: "lts dubnium"
  <<: *full_build
